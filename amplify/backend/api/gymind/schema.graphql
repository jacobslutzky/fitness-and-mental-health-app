# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type Blog @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  posts: [Post!] @hasMany
}

type Post @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  blog: Blog @belongsTo
  comments: [Comment!] @hasMany
}

type Comment @model @auth(rules: [{ allow: private }]) {
  id: ID!
  post: Post @belongsTo
  content: String!
}

"""
Meditation queries 
"""

type MeditationSection @model @auth(rules: [{ allow: private }]) {
  id: ID!
  meditation: MeditationEntry @belongsTo
  title: String!
  description: String!
  time: Int!
}

type MeditationEntry @model @auth(rules: [{ allow: private }]) {
  id: ID!
  video: String!
  author: String!
  image: String!
  sections: [MeditationSection] @hasMany
}


"""
User queries 
"""
type DailyTask @model @auth(rules: [{ allow: private }]) {
  id: ID!
  label: String!
  screen: String!
  icon: String!
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  email: String!
  profilePicture: String
  taskCompletionList: [Int] 
  userStats: UserStats @hasOne
  exerciseLogs: [ExerciseLog] @hasMany(indexName: "byUser", fields: ["id"])
  currentProgram: UserProgram @hasOne(fields: ["id"]) 
  completedPrograms: [UserProgram] @hasMany(indexName: "byUser", fields: ["id"])
  createdPrograms: [Program] @hasMany(indexName: "byUser", fields: ["id"])
  createdWorkouts: [Workout] @hasMany(indexName: "byUser", fields: ["id"])

}



"""
Stats
"""
type UserStats @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: User @belongsTo
  mindfulMinutes: Int
  meditationStreak: Int
  workoutsCompleted: Int
  points: Int
  email: String
  achievementProgresses: [AchievementProgress] @hasMany
}


type AchievementProgress @model @auth(rules: [{ allow: private }]) {
  id: ID!
  userStats: UserStats @belongsTo
  title: String!
  progress: Int!
}


type Achievement @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  description: String!
  goal: Int!
}
"""
Workout queries 
"""

type ExerciseEntry @model @auth(rules: [{ allow: private }]) {
  id: ID!
  repsCompleted: Int
  weight: Float
  dateCompleted: String
  workout: String
  programWeek: String
  program: String
  setNumber: Int
  exerciseLog: ExerciseLog @belongsTo(fields: ["exerciseLogID"])
  exerciseLogID: ID @index(name: "byExerciseLog")

}

type ExerciseLog @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: User @belongsTo(fields: ["userID"])
  userID: ID @index(name: "byUser")
  userExercise: UserExercise @belongsTo(fields: ["userExerciseID"])
  userExerciseID: ID @index(name:"byUserExercise")
  exerciseInfo: ExerciseInfo @hasOne(fields: ["exerciseInfoID"])
  exerciseInfoID: ID
  entries: [ExerciseEntry] @hasMany(indexName: "byExerciseLog", fields: ["id"])
  entryLabels: [String]
}

type Exercise @model @auth(rules: [{ allow: private }]) {
  id: ID!
  workout: Workout @belongsTo(fields: ["workoutID"])
  workoutID: ID @index(name: "byWorkout")
  name: String
  sets: Int!
  RIR: String
  restMinutes: Float!
  exercise: String
  repRange: String!
  exerciseNum: Int
  exerciseInfo: ExerciseInfo @belongsTo(fields: ["exerciseInfoID"])
  exerciseInfoID: ID @index(name: "byExerciseInfo")
  UserExercises: [UserExercise] @hasMany(indexName: "byExercise", fields: ["id"])
  notes: String
}

type ExerciseInfo @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  muscleWorked: String!
  workoutType: String!
  exercises: [Exercise] @hasMany(indexName: "byExerciseInfo", fields: ["id"])
}

type Workout @model @auth(rules: [{ allow: private }]) {
  id: ID!
  programWeek: ProgramWeek @belongsTo(fields: ["programWeekWorkoutsId"])
  programWeekWorkoutsId: ID @index(name: "byProgramWeek")
  workoutNumber: Int
  title: String!
  status: String
  exercises: [Exercise] @hasMany(indexName: "byWorkout", fields: ["id"])
  exerciseLabels: [String]
  userWorkouts: [UserWorkout] @hasMany(indexName: "byWorkout", fields: ["id"])
  author: User @belongsTo(fields: ["authorID"])
  authorID: ID @index(name: "byUser")
  notes: String
}

type WorkoutBank @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  notes: String
  exercises: [Exercise] @hasMany
  exerciseLabels: [String]
}

type ProgramWeek @model @auth(rules: [{ allow: private }]) {
  id: ID!
  programID: ID! @index(name: "byProgram")
  program: Program! @belongsTo(fields: ["programID"])
  weekNumber: Int!
  workouts: [Workout] @hasMany(indexName: "byProgramWeek", fields: ["id"])
  workoutLabels: [String]
  userProgramWeeks: [UserProgWeek] @hasMany(indexName: "byProgramWeek", fields: ["id"])
}

type Program @model @auth(rules: [{ allow: private }]) {
  id: ID!
  author: User @belongsTo(fields: ["authorID"])
  authorID: ID @index(name: "byUser")
  image: String!
  title: String!
  introVideo: String!
  description: String
  weeks: [ProgramWeek!]! @hasMany(indexName: "byProgram", fields: ["id"])
  userPrograms: [UserProgram] @hasMany(indexName: "byProgram", fields: ["id"])
}

type UserProgram @model  @auth(rules: [{ allow: private }]) {
  id: ID!
  user: User @belongsTo(fields: ["userID"])
  userID: ID! @index(name: "byUser")
  image: String!
  title: String!
  introVideo: String!
  description: String
  programID: ID! @index(name: "byProgram")
  program: Program @belongsTo(fields: ["programID"])
  userProgramWeeks:[UserProgWeek] @hasMany(indexName: "byUserProgram", fields: ["id"])
}

type UserProgramWeeks @model @auth(rules: [{ allow: private }]) {
  id: ID!
  weekNumber: Int!
  programWeek: ProgramWeek #@belongsTo(fields: ["programWeekID"])
  programWeekID: ID! #@index(name: "byProgramWeek")
  userProgram: UserProgram #@belongsTo(fields: ["userProgramID"])
  userProgramID: ID! #@index(name: "byUserProgram")
  userWorkouts: [UserWorkout]# @hasMany(indexName: "byUserProgramWeeks", fields: ["id"])
}

type UserProgWeek @model @auth(rules: [{ allow: private }]) {
  id: ID!
  weekNumber: Int!
  programWeek: ProgramWeek @belongsTo(fields: ["programWeekID"])
  programWeekID: ID! @index(name: "byProgramWeek")
  userProgram: UserProgram @belongsTo(fields: ["userProgramID"])
  userProgramID: ID! @index(name: "byUserProgram")
  userWorkouts: [UserWorkout] @hasMany(indexName: "byUserProgramWeeks", fields: ["id"])
}

type UserWorkout @model @auth (rules: [{ allow: private }]) {
  id: ID!
  title: String!
  status: String!
  workout: Workout @belongsTo(fields: ["workoutID"])
  workoutID: ID @index(name: "byWorkout")
  workoutNumber: Int!
  notes: String
  userProgramWeek: UserProgWeek @belongsTo(fields: ["userProgramWeekID"])
  userProgramWeekID: ID @index(name: "byUserProgramWeeks")
  userExercises: [UserExercise] @hasMany(indexName: "byUserWorkout", fields: ["id"])
}

type UserExercise @model  @auth (rules: [{ allow: private }]) {
  id: ID!
  exercise: Exercise @belongsTo(fields: ["exerciseID"])
  exerciseID: ID @index(name: "byExercise")
  exerciseInfo: ExerciseInfo @hasOne(fields: ["exerciseInfoID"])
  exerciseInfoID: ID!
  userWorkout: UserWorkout @belongsTo(fields: ["userWorkoutID"])
  userWorkoutID: ID @index(name: "byUserWorkout")
  exerciseLogs: [ExerciseLog] @hasMany(indexName: "byUserExercise", fields: ["id"])
  exerciseNum: Int!
  repRange: String!
  sets: Int!
  restMinutes: Float!
  RIR: Int
  completed: Boolean!
  notes: String!
}

"""
General Stats

usersMeditating: list of users
timesMeditating: list of times upon listening
meditationEntryListenMinutes: list of minutes listened entries
  Form: {entry}::{minutes}
"""
type GeneralStats @model @auth(rules: [{ allow: private }]) {
  id: ID!
  usersMeditating: [String]
  timesMeditating: [String]
  meditationEntryListenMinutes: [String]
}
