# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules

type Blog @model @auth(rules: [{ allow: private }]) {
  id: ID!
  name: String!
  posts: [Post!] @hasMany
}

type Post @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  blog: Blog @belongsTo
  comments: [Comment!] @hasMany
}

type Comment @model @auth(rules: [{ allow: private }]) {
  id: ID!
  post: Post @belongsTo
  content: String!
}

"""
Meditation queries 
"""

type MeditationSection @model @auth(rules: [{ allow: private }]) {
  id: ID!
  meditation: MeditationEntry @belongsTo
  title: String!
  description: String!
  time: Int!
}

type MeditationEntry @model @auth(rules: [{ allow: private }]) {
  id: ID!
  video: String!
  author: String!
  image: String!
  sections: [MeditationSection] @hasMany
}


"""
User queries 
"""
type DailyTask @model @auth(rules: [{ allow: private }]) {
  id: ID!
  label: String!
  screen: String!
  icon: String!
}

type User @model @auth(rules: [{ allow: private }]) {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  profilePicture: String
  dailyTasks: [DailyTask] @hasMany
  userStats: UserStats @hasOne
  exerciseLogs: [ExerciseLog] @hasMany
  currentProgram: String
}



"""
Stats
"""
type UserStats @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: User @belongsTo
  mindfulMinutes: Int
  meditationStreak: Int
  workoutsCompleted: Int
  achievementProgresses: [AchievementProgress] @hasMany
}


type AchievementProgress @model @auth(rules: [{ allow: private }]) {
  id: ID!
  userStats: UserStats @belongsTo
  title: String!
  progress: Int!
}


type Achievement @model @auth(rules: [{ allow: private }]) {
  id: ID!
  title: String!
  goal: Int!
}
"""
Workout queries 
"""

type ExerciseEntry @model @auth(rules: [{ allow: private }]) {
  id: ID!
  repsCompleted: Int
  weight: Float
  dateCompleted: String
  workout: String
  programWeek: String
  program: String
}

type ExerciseLog @model @auth(rules: [{ allow: private }]) {
  id: ID!
  user: User @belongsTo
  exercise: String!
  entries: [ExerciseEntry] @hasMany
  entryLabels: [String]
}

type Exercise @model @auth(rules: [{ allow: private }]) {
  id: ID!
  workout: Workout @belongsTo
  name: String!
  sets: Int!
  RIR: String!
  restMinutes: Float!
  repRange: String!
  exerciseNum: Int!
}

type Workout @model @auth(rules: [{ allow: private }]) {
  id: ID!
  programWeek: ProgramWeek @belongsTo
  workoutNumber: Int!
  title: String!
  status: String!
  exercises: [Exercise!]! @hasMany
  exerciseLabels: [String]
}

type ProgramWeek @model @auth(rules: [{ allow: private }]) {
  id: ID!
  program: Program @belongsTo
  weekNumber: Int!
  workouts: [Workout!]! @hasMany
  workoutLabels: [String]
}

type Program @model @auth(rules: [{ allow: private }]) {
  id: ID!
  author: String!
  image: String!
  title: String!
  introVideo: String!
  weeks: [ProgramWeek!]! @hasMany
}

"""
General Stats

usersMeditating: list of users
timesMeditating: list of times upon listening
meditationEntryListenMinutes: list of minutes listened entries
  Form: {entry}::{minutes}
"""
type GeneralStats @model @auth(rules: [{ allow: private }]) {
  id: ID!
  usersMeditating: [String]
  timesMeditating: [String]
  meditationEntryListenMinutes: [String]
}